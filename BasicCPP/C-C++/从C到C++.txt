C++

1、对C的兼容：所有的C语言程序都是标准的C++程序
2、后缀
3、标准输入输出流头文件的改变
4、g++

C++的升级：

名字控制：
1、::：域解析符
2、namespace 命名空间
3、using 声明后面的符号可用
4、std:c++标准命名空间


更严格的类型控制
1、enum加强
2、bool:布尔类型 判断真假   赋非0值都是1

运算符加强：
三目运算符的加强：? :
c语言中三目运算符的返回结果是值
c++返回变量本身

关键字加强
const 真常量

const和#define
1、const被命名空间约束，define作用在全局
2、const有明确数据类型定义，define没有

struct加强
结构体本身的名字就作为类型
内部可以定义函数

指针加强：
变量名：内存的标识
指针：内存的地址
引用：内存的别名

引用本质：指针常量
int &b = a;
int *const b = &a;

引用代码会在编译阶段被替换成指针常量

注意事项：
1、要定义时初始化
2、初始化以后不再改变朝向
3、本质是指针常量,编译期替换
4、sizeof引用就是sizeof原变量

左值和右值：
1、左值:有内存的值
2、右值:没有内存的值

const int &a:常引用  解决右值没有办法传递给左值引用的问题


函数加强：
1、内联函数
    内联规则：
    1、不要有循环
    2、条件分支太多
    3、不能取函数地址
    4、不能有递归
    ...

2、默认参数：
    1、函数声明的时候添加默认参数
    2、默认参数必须放在参数列表的末尾
    3、默认参数的后面全部都是默认参数

3、函数重载（多态）
    函数名相同，函数定义不同

    重载的规则：
    1、参数类型不一样
    2、参数数量不一样
    3、参数顺序不一样


C和C++联合编译

#ifdef __cplusplus
extern "C" :以C语言的函数命名方式进行编译
{
#endif

... .h文件接口

#ifdef __cplusplus
}
#endif

1、g++ main.cpp test.c -o 1
2、gcc -c test.c -o test.o
   g++ main.cpp test.o -o 1 //过不了
3、extern "C"
   g++ main.cpp test.o -o 1 //能过
   gcc -c test.c -o test.o  //过不了
4、ifndef_cplusplus


c++内存管理：
c语言的内存管理

c++：new delete

new()  delete
new[]  delete []

std::string
